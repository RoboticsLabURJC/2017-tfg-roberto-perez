# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.4
#
# <auto-generated>
#
# Generated from file `primitives.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import _Users_roberto_Desktop_jderobot_common_ice

# Included module jderobot
_M_jderobot = Ice.openModule('jderobot')

# Start of module jderobot
__name__ = 'jderobot'

if 'RGBPoint' not in _M_jderobot.__dict__:
    _M_jderobot.RGBPoint = Ice.createTempClass()
    class RGBPoint(object):
        """
        PCL
        """
        def __init__(self, x=0.0, y=0.0, z=0.0, r=0.0, g=0.0, b=0.0, id=0):
            self.x = x
            self.y = y
            self.z = z
            self.r = r
            self.g = g
            self.b = b
            self.id = id

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_jderobot.RGBPoint):
                return NotImplemented
            else:
                if self.x != other.x:
                    return False
                if self.y != other.y:
                    return False
                if self.z != other.z:
                    return False
                if self.r != other.r:
                    return False
                if self.g != other.g:
                    return False
                if self.b != other.b:
                    return False
                if self.id != other.id:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_RGBPoint)

        __repr__ = __str__

    _M_jderobot._t_RGBPoint = IcePy.defineStruct('::jderobot::RGBPoint', RGBPoint, (), (
        ('x', (), IcePy._t_float),
        ('y', (), IcePy._t_float),
        ('z', (), IcePy._t_float),
        ('r', (), IcePy._t_float),
        ('g', (), IcePy._t_float),
        ('b', (), IcePy._t_float),
        ('id', (), IcePy._t_int)
    ))

    _M_jderobot.RGBPoint = RGBPoint
    del RGBPoint

if 'Point' not in _M_jderobot.__dict__:
    _M_jderobot.Point = Ice.createTempClass()
    class Point(object):
        def __init__(self, x=0.0, y=0.0, z=0.0):
            self.x = x
            self.y = y
            self.z = z

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_jderobot.Point):
                return NotImplemented
            else:
                if self.x != other.x:
                    return False
                if self.y != other.y:
                    return False
                if self.z != other.z:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_Point)

        __repr__ = __str__

    _M_jderobot._t_Point = IcePy.defineStruct('::jderobot::Point', Point, (), (
        ('x', (), IcePy._t_float),
        ('y', (), IcePy._t_float),
        ('z', (), IcePy._t_float)
    ))

    _M_jderobot.Point = Point
    del Point

if 'Segment' not in _M_jderobot.__dict__:
    _M_jderobot.Segment = Ice.createTempClass()
    class Segment(object):
        def __init__(self, fromPoint=Ice._struct_marker, toPoint=Ice._struct_marker):
            if fromPoint is Ice._struct_marker:
                self.fromPoint = _M_jderobot.Point()
            else:
                self.fromPoint = fromPoint
            if toPoint is Ice._struct_marker:
                self.toPoint = _M_jderobot.Point()
            else:
                self.toPoint = toPoint

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_jderobot.Segment):
                return NotImplemented
            else:
                if self.fromPoint != other.fromPoint:
                    return False
                if self.toPoint != other.toPoint:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_Segment)

        __repr__ = __str__

    _M_jderobot._t_Segment = IcePy.defineStruct('::jderobot::Segment', Segment, (), (
        ('fromPoint', (), _M_jderobot._t_Point),
        ('toPoint', (), _M_jderobot._t_Point)
    ))

    _M_jderobot.Segment = Segment
    del Segment

# End of module jderobot
